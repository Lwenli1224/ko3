#!/usr/bin/env node

const path = require('path')
const fs = require('fs')
const _ = require('lodash')
const chalk = require('chalk')
const program = require('commander')
const Ko = require('../lib/ko')
const generateDocs = require('../lib/doc').generateDocs

program
	.usage('<prj-name>')
	.option('-d, --deploy', 'deploy the project after built')
	.option('-o, --documents', 'generate documents after built')
	.on('--help', function () {
	  console.log('  Examples:')
	  console.log()
	  console.log(chalk.gray('    # build the project'))
	  console.log('    $ ko3 build project-name')
	  console.log()
	})
	.parse(process.argv)

if(program.args.length < 1) {
	return program.help()
}
const prjName = program.args[0]
const koConfigFileName = 'ko.config.js'
const koConfigFilePath = path.resolve('.', koConfigFileName)
const deploy = program.deploy
const documents = program.documents

let options = {}
if(fs.existsSync(koConfigFilePath)) {
	options = require(koConfigFilePath)
}else {
	console.log(chalk.red(`Could not locate ${koConfigFileName}`))
	return
}

options.prjName = prjName

new Ko(options)
	.then(ko => {
		ko.clearDist()
			.then(ko.parseHtml)
			.then(ko.build)
			.then(ko.outputHtml)
			.then(ko.sitemap)
			.then(() => {
				return ko.clearTmp()
			})
			.then(() => {
				console.log(chalk.green('Building done'))
				if(documents) {
					
					return generateDocs(documents == true ? './' : documents, ko.options)
				}
				return Promise.resolve()
			})
			.then(() => {
				if(deploy) {
					console.log(chalk.gray('Uploading...'))
					return ko.deploy()
				}
				return Promise.resolve()
			})
			.catch((err) => {
				console.error(err)
				process.exit(1)
			})
	})
